// Generated by rstantools.  Do not edit by hand.

/*
    rbcpingarch is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rbcpingarch is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rbcpingarch.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_modelfull_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_modelfull");
    reader.add_event(34, 32, "end", "model_modelfull");
    return reader;
}
#include <stan_meta_header.hpp>
class model_modelfull
  : public stan::model::model_base_crtp<model_modelfull> {
private:
        int n;
        matrix_d Y;
        double med_y1;
        double med_y2;
public:
    model_modelfull(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_modelfull(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_modelfull_namespace::model_modelfull";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 3;
            validate_non_negative_index("Y", "n", n);
            validate_non_negative_index("Y", "2", 2);
            context__.validate_dims("data initialization", "Y", "matrix_d", context__.to_vec(n,2));
            Y = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, 2);
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_j_2_max__ = 2;
            size_t Y_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < Y_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Y_j_1_max__; ++j_1__) {
                    Y(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "med_y1", "double", context__.to_vec());
            med_y1 = double(0);
            vals_r__ = context__.vals_r("med_y1");
            pos__ = 0;
            med_y1 = vals_r__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "med_y2", "double", context__.to_vec());
            med_y2 = double(0);
            vals_r__ = context__.vals_r("med_y2");
            pos__ = 0;
            med_y2 = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 8;
            validate_non_negative_index("B", "2", 2);
            validate_non_negative_index("B", "2", 2);
            num_params_r__ += (2 * 2);
            current_statement_begin__ = 9;
            validate_non_negative_index("A", "2", 2);
            validate_non_negative_index("A", "2", 2);
            num_params_r__ += (2 * 2);
            current_statement_begin__ = 10;
            validate_non_negative_index("omega", "2", 2);
            validate_non_negative_index("omega", "1", 1);
            num_params_r__ += (2 * 1);
            current_statement_begin__ = 11;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_modelfull() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 8;
        if (!(context__.contains_r("B")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable B missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("B");
        pos__ = 0U;
        validate_non_negative_index("B", "2", 2);
        validate_non_negative_index("B", "2", 2);
        context__.validate_dims("parameter initialization", "B", "matrix_d", context__.to_vec(2,2));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> B(2, 2);
        size_t B_j_2_max__ = 2;
        size_t B_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                B(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lub_unconstrain(0, 1, B);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable B: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 9;
        if (!(context__.contains_r("A")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable A missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("A");
        pos__ = 0U;
        validate_non_negative_index("A", "2", 2);
        validate_non_negative_index("A", "2", 2);
        context__.validate_dims("parameter initialization", "A", "matrix_d", context__.to_vec(2,2));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> A(2, 2);
        size_t A_j_2_max__ = 2;
        size_t A_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                A(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lub_unconstrain(0, 1, A);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable A: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 10;
        if (!(context__.contains_r("omega")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable omega missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("omega");
        pos__ = 0U;
        validate_non_negative_index("omega", "2", 2);
        validate_non_negative_index("omega", "1", 1);
        context__.validate_dims("parameter initialization", "omega", "matrix_d", context__.to_vec(2,1));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> omega(2, 1);
        size_t omega_j_2_max__ = 1;
        size_t omega_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
                omega(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_lb_unconstrain(0, omega);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable omega: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 11;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 8;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> B;
            (void) B;  // dummy to suppress unused var warning
            if (jacobian__)
                B = in__.matrix_lub_constrain(0, 1, 2, 2, lp__);
            else
                B = in__.matrix_lub_constrain(0, 1, 2, 2);
            current_statement_begin__ = 9;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> A;
            (void) A;  // dummy to suppress unused var warning
            if (jacobian__)
                A = in__.matrix_lub_constrain(0, 1, 2, 2, lp__);
            else
                A = in__.matrix_lub_constrain(0, 1, 2, 2);
            current_statement_begin__ = 10;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> omega;
            (void) omega;  // dummy to suppress unused var warning
            if (jacobian__)
                omega = in__.matrix_lb_constrain(0, 2, 1, lp__);
            else
                omega = in__.matrix_lb_constrain(0, 2, 1);
            current_statement_begin__ = 11;
            local_scalar_t__ phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.scalar_constrain(lp__);
            else
                phi = in__.scalar_constrain();
            // transformed parameters
            current_statement_begin__ = 14;
            validate_non_negative_index("lambda", "n", n);
            validate_non_negative_index("lambda", "2", 2);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> lambda(n, 2);
            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 15;
            stan::model::assign(lambda, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (((get_base1(omega, 1, 1, "omega", 1) + (get_base1(A, 1, 1, "A", 1) * mean(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "Y")))) + (get_base1(B, 1, 1, "B", 1) * med_y1)) + (get_base1(B, 1, 2, "B", 1) * med_y2)), 
                        "assigning variable lambda");
            current_statement_begin__ = 16;
            stan::model::assign(lambda, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        (((get_base1(omega, 2, 1, "omega", 1) + (get_base1(A, 2, 2, "A", 1) * mean(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "Y")))) + (get_base1(B, 2, 2, "B", 1) * med_y2)) + (get_base1(B, 2, 1, "B", 1) * med_y1)), 
                        "assigning variable lambda");
            current_statement_begin__ = 18;
            for (int t = 2; t <= n; ++t) {
                current_statement_begin__ = 19;
                stan::model::assign(lambda, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            stan::model::deep_copy(to_row_vector(add(add(to_vector(transpose(omega)), multiply(A, transpose(stan::model::rvalue(lambda, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda")))), multiply(B, transpose(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Y")))))), 
                            "assigning variable lambda");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 14;
            size_t lambda_j_1_max__ = n;
            size_t lambda_j_2_max__ = 2;
            for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < lambda_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(lambda(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: lambda" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            check_greater_or_equal(function__, "lambda", lambda, 0);
            // model body
            {
            current_statement_begin__ = 23;
            validate_non_negative_index("y1", "(n - 1)", (n - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y1((n - 1));
            stan::math::initialize(y1, DUMMY_VAR__);
            stan::math::fill(y1, DUMMY_VAR__);
            current_statement_begin__ = 23;
            validate_non_negative_index("y2", "(n - 1)", (n - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> y2((n - 1));
            stan::math::initialize(y2, DUMMY_VAR__);
            stan::math::fill(y2, DUMMY_VAR__);
            current_statement_begin__ = 24;
            validate_non_negative_index("l1", "(n - 1)", (n - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> l1((n - 1));
            stan::math::initialize(l1, DUMMY_VAR__);
            stan::math::fill(l1, DUMMY_VAR__);
            current_statement_begin__ = 24;
            validate_non_negative_index("l2", "(n - 1)", (n - 1));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> l2((n - 1));
            stan::math::initialize(l2, DUMMY_VAR__);
            stan::math::fill(l2, DUMMY_VAR__);
            current_statement_begin__ = 25;
            stan::math::assign(y1, stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_min_max(2, n), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "Y"));
            current_statement_begin__ = 25;
            stan::math::assign(y2, stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_min_max(2, n), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "Y"));
            current_statement_begin__ = 26;
            stan::math::assign(l1, stan::model::rvalue(lambda, stan::model::cons_list(stan::model::index_min_max(2, n), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "lambda"));
            current_statement_begin__ = 26;
            stan::math::assign(l2, stan::model::rvalue(lambda, stan::model::cons_list(stan::model::index_min_max(2, n), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "lambda"));
            current_statement_begin__ = 28;
            lp_accum__.add((dot_product(y1, stan::math::log(l1)) + dot_product(y2, stan::math::log(l2))));
            current_statement_begin__ = 29;
            lp_accum__.add(-(dot_product(l1, add(1, multiply(y2, (stan::math::exp(phi) - 1))))));
            current_statement_begin__ = 30;
            lp_accum__.add(-(dot_product(l2, stan::math::exp(add(multiply(minus(l1), (stan::math::exp(phi) - 1)), multiply(phi, y1))))));
            current_statement_begin__ = 31;
            lp_accum__.add((phi * dot_product(y1, y2)));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("B");
        names__.push_back("A");
        names__.push_back("omega");
        names__.push_back("phi");
        names__.push_back("lambda");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back(2);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_modelfull_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> B = in__.matrix_lub_constrain(0, 1, 2, 2);
        size_t B_j_2_max__ = 2;
        size_t B_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                vars__.push_back(B(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> A = in__.matrix_lub_constrain(0, 1, 2, 2);
        size_t A_j_2_max__ = 2;
        size_t A_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                vars__.push_back(A(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> omega = in__.matrix_lb_constrain(0, 2, 1);
        size_t omega_j_2_max__ = 1;
        size_t omega_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
                vars__.push_back(omega(j_1__, j_2__));
            }
        }
        double phi = in__.scalar_constrain();
        vars__.push_back(phi);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 14;
            validate_non_negative_index("lambda", "n", n);
            validate_non_negative_index("lambda", "2", 2);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> lambda(n, 2);
            stan::math::initialize(lambda, DUMMY_VAR__);
            stan::math::fill(lambda, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 15;
            stan::model::assign(lambda, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        (((get_base1(omega, 1, 1, "omega", 1) + (get_base1(A, 1, 1, "A", 1) * mean(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), "Y")))) + (get_base1(B, 1, 1, "B", 1) * med_y1)) + (get_base1(B, 1, 2, "B", 1) * med_y2)), 
                        "assigning variable lambda");
            current_statement_begin__ = 16;
            stan::model::assign(lambda, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                        (((get_base1(omega, 2, 1, "omega", 1) + (get_base1(A, 2, 2, "A", 1) * mean(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), "Y")))) + (get_base1(B, 2, 2, "B", 1) * med_y2)) + (get_base1(B, 2, 1, "B", 1) * med_y1)), 
                        "assigning variable lambda");
            current_statement_begin__ = 18;
            for (int t = 2; t <= n; ++t) {
                current_statement_begin__ = 19;
                stan::model::assign(lambda, 
                            stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                            stan::model::deep_copy(to_row_vector(add(add(to_vector(transpose(omega)), multiply(A, transpose(stan::model::rvalue(lambda, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda")))), multiply(B, transpose(stan::model::rvalue(Y, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "Y")))))), 
                            "assigning variable lambda");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 14;
            check_greater_or_equal(function__, "lambda", lambda, 0);
            // write transformed parameters
            if (include_tparams__) {
                size_t lambda_j_2_max__ = 2;
                size_t lambda_j_1_max__ = n;
                for (size_t j_2__ = 0; j_2__ < lambda_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                        vars__.push_back(lambda(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_modelfull";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t B_j_2_max__ = 2;
        size_t B_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "B" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t A_j_2_max__ = 2;
        size_t A_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t omega_j_2_max__ = 1;
        size_t omega_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "omega" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t lambda_j_2_max__ = 2;
            size_t lambda_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < lambda_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "lambda" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t B_j_2_max__ = 2;
        size_t B_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < B_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < B_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "B" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t A_j_2_max__ = 2;
        size_t A_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t omega_j_2_max__ = 1;
        size_t omega_j_1_max__ = 2;
        for (size_t j_2__ = 0; j_2__ < omega_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "omega" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t lambda_j_2_max__ = 2;
            size_t lambda_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < lambda_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "lambda" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_modelfull_namespace::model_modelfull stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
